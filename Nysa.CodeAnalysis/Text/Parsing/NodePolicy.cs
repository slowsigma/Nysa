using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nysa.Text.Parsing;

/// <summary>
/// NodePolicy is used to affect the final shape of the syntax tree
/// generated from a successful parse. All grammar rules are marked
/// with the Default policy when one is not explicitly declared.
/// When a grammar rule is marked with a policy other than Default,
/// it will affect whether or not nodes generated by that grammar
/// rule will appear in the final tree and what will happen to a
/// node's contents (i.e., child nodes), if any. 
/// </summary>
public enum NodePolicy : Int32
{
    /// <summary>
    /// By default, each node created in the parsing process is
    /// kept in the final tree. 
    /// </summary>
    Default,                    // keep each node created by the grammar rule
    /// <summary>
    /// Remove any node created by this grammar rule regardless of content.
    /// </summary>
    Remove,                     // remove parse node regardless of content
    /// <summary>
    /// Remove only when the node has no content (i.e., no child nodes).
    /// </summary>
    RemoveEmpty,                // remove parse node when empty
    /// <summary>
    /// Give the contents of a node of this type to its parent in place
    /// of it but maintain all content position relative to siblings.
    /// </summary>
    Collapse,                   // collapse content to parent
    /// <summary>
    /// For any node of this type with only one child node, give that
    /// child node to the parent in place of it but maintain content
    /// position relative to siblings.
    /// </summary>
    CollapseSingle,             // collapse content to parent when content is a single child
    /// <summary>
    /// For any node of this type with children of the same type, give
    /// those children to this node's parent. The order of those children
    /// moved up will be maintained as siblings that follow this node.
    /// </summary>
    RollupSiblings              // collapse children of the same type to the parent
}
